"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isElementInSvg = exports.isSkipNavTreeNode = exports.isMovingElement = exports.getAllUnknownClasses = exports.getAllUnknownClasesFromList = exports.isOutline = exports.hasClass = exports.removeUniqueLookupFromNode = exports.getUniqueLookupFromNode = exports.getElementKeyFromNode = exports.addCodebaseIdToNode = exports.addUniqueLookupAsClass = exports.addElementKeyAsClass = exports.getCodebaseIdFromNode = exports.getCodebaseIdFromClassName = exports.validateUuid = exports.KNOWN_ATTRIBUTES = exports.TEMPO_QUEUE_DELETE_AFTER_HOT_RELOAD = exports.TEMPO_TEST_ID = exports.TEMPO_ELEMENT_ID = exports.TEMPO_DO_NOT_SHOW_IN_NAV_UNTIL_REFRESH = exports.TEMPO_OUTLINE_UNTIL_REFESH = exports.TEMPO_DELETE_AFTER_REFRESH = exports.TEMPO_INSTANT_UPDATE = exports.TEMPO_DELETE_AFTER_INSTANT_UPDATE = exports.TEMPO_DISPLAY_NONE_UNTIL_REFRESH_CLASS = exports.TEMPO_INSTANT_UPDATE_STYLING_PREFIX = exports.TEMPO_MOVE_BETWEEN_PARENTS_OUTLINE = exports.TEMPO_INSTANT_DIV_DRAW_CLASS = exports.EDIT_TEXT_BUTTON = exports.OUTLINE_CLASS = exports.UNIQUE_LOOKUP_PREFIX = exports.ELEMENT_KEY_PREFIX = void 0;
const changeItemFunctions_1 = require("./changeItemFunctions");
// Must match identifier utils on the frontend
exports.ELEMENT_KEY_PREFIX = 'arb89-key-';
exports.UNIQUE_LOOKUP_PREFIX = 'arb89-lookup-'; // Used only for processing the nav tree
exports.OUTLINE_CLASS = 'arb89-outline';
exports.EDIT_TEXT_BUTTON = 'arb89-edit-text-button';
exports.TEMPO_INSTANT_DIV_DRAW_CLASS = 'arb89-instant-div-draw';
exports.TEMPO_MOVE_BETWEEN_PARENTS_OUTLINE = 'arb89-move-between-parents-outline';
exports.TEMPO_INSTANT_UPDATE_STYLING_PREFIX = 'arb89-styling-';
exports.TEMPO_DISPLAY_NONE_UNTIL_REFRESH_CLASS = 'arb89-display-none-until-refresh';
exports.TEMPO_DELETE_AFTER_INSTANT_UPDATE = 'arb89-delete-after-instant-update';
const KNOWN_CLASSES = new Set([
    exports.OUTLINE_CLASS,
    exports.TEMPO_INSTANT_DIV_DRAW_CLASS,
    exports.TEMPO_MOVE_BETWEEN_PARENTS_OUTLINE,
    exports.TEMPO_DISPLAY_NONE_UNTIL_REFRESH_CLASS,
    changeItemFunctions_1.WRAP_IN_DIV_PLACEHOLDER_CODEBASE_ID,
    changeItemFunctions_1.TEMPORARY_STYLING_CLASS_NAME,
    exports.EDIT_TEXT_BUTTON,
]);
const KNOWN_CLASS_PREFIXES = [
    exports.ELEMENT_KEY_PREFIX,
    exports.UNIQUE_LOOKUP_PREFIX,
    exports.TEMPO_INSTANT_UPDATE_STYLING_PREFIX,
    changeItemFunctions_1.DUPLICATE_PLACEHOLDER_PREFIX,
    changeItemFunctions_1.ADD_JSX_PREFIX,
];
// Attributes that are set until the next Nav Tree Refresh
exports.TEMPO_INSTANT_UPDATE = 'arb89-instant-update';
exports.TEMPO_DELETE_AFTER_REFRESH = 'arb89-delete-after-refresh';
exports.TEMPO_OUTLINE_UNTIL_REFESH = 'arb89-outline-until-refresh';
exports.TEMPO_DO_NOT_SHOW_IN_NAV_UNTIL_REFRESH = 'arb89-do-not-show-in-nav';
exports.TEMPO_ELEMENT_ID = 'tempoelementid';
exports.TEMPO_TEST_ID = 'data-testid';
exports.TEMPO_QUEUE_DELETE_AFTER_HOT_RELOAD = 'arb89-queue-delete-after-hot-reload';
exports.KNOWN_ATTRIBUTES = new Set([
    exports.TEMPO_INSTANT_UPDATE,
    exports.TEMPO_DELETE_AFTER_REFRESH,
    exports.TEMPO_DELETE_AFTER_INSTANT_UPDATE,
    exports.TEMPO_OUTLINE_UNTIL_REFESH,
    exports.TEMPO_QUEUE_DELETE_AFTER_HOT_RELOAD,
    exports.TEMPO_DO_NOT_SHOW_IN_NAV_UNTIL_REFRESH,
    exports.TEMPO_ELEMENT_ID,
    exports.TEMPO_TEST_ID,
]);
const validateUuid = (uuid) => {
    return new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$', 'i').test(uuid);
};
exports.validateUuid = validateUuid;
const getCodebaseIdFromClassName = (className) => {
    if (className &&
        className.startsWith('tempo-') &&
        ((0, exports.validateUuid)(className.substring('tempo-'.length)) ||
            className === changeItemFunctions_1.WRAP_IN_DIV_PLACEHOLDER_CODEBASE_ID ||
            className.startsWith(changeItemFunctions_1.DUPLICATE_PLACEHOLDER_PREFIX))) {
        return className;
    }
    return null;
};
exports.getCodebaseIdFromClassName = getCodebaseIdFromClassName;
const getCodebaseIdFromNode = (node) => {
    var _a;
    if (!(node === null || node === void 0 ? void 0 : node.classList)) {
        return null;
    }
    let clsFound = null;
    node.classList.forEach((cls) => {
        // A bit of a hack -> in the case when there are multiple tempo codebase IDs on an element
        // we want to use the first one defined. This happens in the case of forward refs, and we
        // always add the bottom-most className to the end of the classes list, so we want to
        // show the top-most element in this case
        if (clsFound) {
            return;
        }
        if (!cls) {
            return;
        }
        const extractedId = (0, exports.getCodebaseIdFromClassName)(cls);
        if (extractedId) {
            clsFound = extractedId;
        }
    });
    if (clsFound) {
        return clsFound;
    }
    if (((_a = node === null || node === void 0 ? void 0 : node.tagName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) == 'body') {
        return 'body';
    }
    if ((node === null || node === void 0 ? void 0 : node.id) == 'root') {
        return 'root';
    }
    if ((node === null || node === void 0 ? void 0 : node.id) == '__next') {
        return '__next';
    }
    return null;
};
exports.getCodebaseIdFromNode = getCodebaseIdFromNode;
const addElementKeyAsClass = (node, safeElementKey) => {
    if (!(node === null || node === void 0 ? void 0 : node.classList)) {
        return;
    }
    const classesToRemove = new Set();
    node.classList.forEach((cls) => {
        if (cls === null || cls === void 0 ? void 0 : cls.startsWith(exports.ELEMENT_KEY_PREFIX)) {
            classesToRemove.add(cls);
        }
    });
    classesToRemove.forEach((cls) => {
        node.classList.remove(cls);
    });
    node.classList.add(`${exports.ELEMENT_KEY_PREFIX}${safeElementKey}`);
};
exports.addElementKeyAsClass = addElementKeyAsClass;
const addUniqueLookupAsClass = (node, uniqueLookup) => {
    if (!(node === null || node === void 0 ? void 0 : node.classList)) {
        return;
    }
    const classesToRemove = new Set();
    node.classList.forEach((cls) => {
        if (cls === null || cls === void 0 ? void 0 : cls.startsWith(exports.UNIQUE_LOOKUP_PREFIX)) {
            classesToRemove.add(cls);
        }
    });
    classesToRemove.forEach((cls) => {
        node.classList.remove(cls);
    });
    node.classList.add(`${exports.UNIQUE_LOOKUP_PREFIX}${uniqueLookup}`);
};
exports.addUniqueLookupAsClass = addUniqueLookupAsClass;
const addCodebaseIdToNode = (node, codebaseId) => {
    if (!(node === null || node === void 0 ? void 0 : node.classList)) {
        return;
    }
    const classesToRemove = new Set();
    node.classList.forEach((cls) => {
        if (!cls) {
            return;
        }
        if ((0, exports.getCodebaseIdFromClassName)(cls)) {
            classesToRemove.add(cls);
        }
    });
    classesToRemove.forEach((cls) => {
        node.classList.remove(cls);
    });
    node.classList.add(codebaseId);
};
exports.addCodebaseIdToNode = addCodebaseIdToNode;
const getElementKeyFromNode = (node) => {
    if (!(node === null || node === void 0 ? void 0 : node.classList)) {
        return null;
    }
    let clsFound = null;
    node.classList.forEach((cls) => {
        if (cls === null || cls === void 0 ? void 0 : cls.startsWith(exports.ELEMENT_KEY_PREFIX)) {
            clsFound = cls.substring(exports.ELEMENT_KEY_PREFIX.length);
        }
    });
    return clsFound;
};
exports.getElementKeyFromNode = getElementKeyFromNode;
const getUniqueLookupFromNode = (node) => {
    if (!(node === null || node === void 0 ? void 0 : node.classList)) {
        return null;
    }
    let clsFound = null;
    node.classList.forEach((cls) => {
        if (cls === null || cls === void 0 ? void 0 : cls.startsWith(exports.UNIQUE_LOOKUP_PREFIX)) {
            clsFound = cls.substring(exports.UNIQUE_LOOKUP_PREFIX.length);
        }
    });
    return clsFound;
};
exports.getUniqueLookupFromNode = getUniqueLookupFromNode;
const removeUniqueLookupFromNode = (node) => {
    if (!(node === null || node === void 0 ? void 0 : node.classList)) {
        return false;
    }
    const classesToRemove = new Set();
    node.classList.forEach((cls) => {
        if (cls === null || cls === void 0 ? void 0 : cls.startsWith(exports.UNIQUE_LOOKUP_PREFIX)) {
            classesToRemove.add(cls);
        }
    });
    classesToRemove.forEach((cls) => {
        node.classList.remove(cls);
    });
    return classesToRemove.size > 0;
};
exports.removeUniqueLookupFromNode = removeUniqueLookupFromNode;
const hasClass = (node, klass) => {
    if (!(node === null || node === void 0 ? void 0 : node.classList)) {
        return false;
    }
    let hasClass = false;
    node.classList.forEach((cls) => {
        if (cls == klass) {
            hasClass = true;
        }
    });
    return hasClass;
};
exports.hasClass = hasClass;
const isOutline = (node) => {
    return (0, exports.hasClass)(node, exports.OUTLINE_CLASS);
};
exports.isOutline = isOutline;
const getAllUnknownClasesFromList = (classes) => {
    return classes.filter((cls) => {
        if (!cls) {
            return false;
        }
        const isCodebaseId = (0, exports.getCodebaseIdFromClassName)(cls) !== null;
        const clsStartsWithKnownPrefix = KNOWN_CLASS_PREFIXES.some((prefix) => cls.startsWith(prefix));
        if (!clsStartsWithKnownPrefix && !KNOWN_CLASSES.has(cls) && !isCodebaseId) {
            return true;
        }
        return false;
    });
};
exports.getAllUnknownClasesFromList = getAllUnknownClasesFromList;
const getAllUnknownClasses = (node) => {
    if (!(node === null || node === void 0 ? void 0 : node.classList)) {
        return [];
    }
    return (0, exports.getAllUnknownClasesFromList)(Array.from(node.classList));
};
exports.getAllUnknownClasses = getAllUnknownClasses;
/**
 * Accepts a node from mutation observer and determines if it's a moving element.
 * Returns moving if and only if the node has the attribute `arb89-instant-update` set to true.
 * @param node
 * @returns
 */
const isMovingElement = (node) => {
    if (!node) {
        return false;
    }
    // Check if the node responds to getAttribute method.
    if (typeof node.getAttribute !== 'function') {
        return false;
    }
    return node.getAttribute(exports.TEMPO_INSTANT_UPDATE) === 'true';
};
exports.isMovingElement = isMovingElement;
const isSkipNavTreeNode = (node) => {
    if (!node) {
        return;
    }
    return node.getAttribute(exports.TEMPO_DO_NOT_SHOW_IN_NAV_UNTIL_REFRESH) === 'true';
};
exports.isSkipNavTreeNode = isSkipNavTreeNode;
/**
 * Check if the node has any parent that is an svg tag
 */
const isElementInSvg = (node, parent) => {
    var _a;
    if (!node) {
        return false;
    }
    if (parent && ((_a = node.tagName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'svg') {
        return true;
    }
    if (node.parentNode) {
        return (0, exports.isElementInSvg)(node.parentNode, true);
    }
    return false;
};
exports.isElementInSvg = isElementInSvg;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlbnRpZmllclV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NoYW5uZWxNZXNzYWdpbmcvaWRlbnRpZmllclV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLCtEQUsrQjtBQUUvQiw4Q0FBOEM7QUFDakMsUUFBQSxrQkFBa0IsR0FBRyxZQUFZLENBQUM7QUFDbEMsUUFBQSxvQkFBb0IsR0FBRyxlQUFlLENBQUMsQ0FBQyx3Q0FBd0M7QUFDaEYsUUFBQSxhQUFhLEdBQUcsZUFBZSxDQUFDO0FBQ2hDLFFBQUEsZ0JBQWdCLEdBQUcsd0JBQXdCLENBQUM7QUFDNUMsUUFBQSw0QkFBNEIsR0FBRyx3QkFBd0IsQ0FBQztBQUN4RCxRQUFBLGtDQUFrQyxHQUM3QyxvQ0FBb0MsQ0FBQztBQUMxQixRQUFBLG1DQUFtQyxHQUFHLGdCQUFnQixDQUFDO0FBQ3ZELFFBQUEsc0NBQXNDLEdBQ2pELGtDQUFrQyxDQUFDO0FBQ3hCLFFBQUEsaUNBQWlDLEdBQzVDLG1DQUFtQyxDQUFDO0FBRXRDLE1BQU0sYUFBYSxHQUFHLElBQUksR0FBRyxDQUFDO0lBQzVCLHFCQUFhO0lBQ2Isb0NBQTRCO0lBQzVCLDBDQUFrQztJQUNsQyw4Q0FBc0M7SUFDdEMseURBQW1DO0lBQ25DLGtEQUE0QjtJQUM1Qix3QkFBZ0I7Q0FDakIsQ0FBQyxDQUFDO0FBQ0gsTUFBTSxvQkFBb0IsR0FBRztJQUMzQiwwQkFBa0I7SUFDbEIsNEJBQW9CO0lBQ3BCLDJDQUFtQztJQUNuQyxrREFBNEI7SUFDNUIsb0NBQWM7Q0FDZixDQUFDO0FBRUYsMERBQTBEO0FBQzdDLFFBQUEsb0JBQW9CLEdBQUcsc0JBQXNCLENBQUM7QUFDOUMsUUFBQSwwQkFBMEIsR0FBRyw0QkFBNEIsQ0FBQztBQUMxRCxRQUFBLDBCQUEwQixHQUFHLDZCQUE2QixDQUFDO0FBQzNELFFBQUEsc0NBQXNDLEdBQ2pELDBCQUEwQixDQUFDO0FBQ2hCLFFBQUEsZ0JBQWdCLEdB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LFlBQVksQ0FBQyw0QkFBb0IsQ0FBQyxLQUFLLE1BQU0sQ0FBQztBQUM1RCxDQUFDLENBQUM7QUFYVyxRQUFBLGVBQWUsbUJBVzFCO0FBRUssTUFBTSxpQkFBaUIsR0FBRyxDQUFDLElBQVMsRUFBRSxFQUFFO0lBQzdDLElBQUksQ0FBQyxJQUFJLEVBQUU7UUFDVCxPQUFPO0tBQ1I7SUFFRCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsOENBQXNDLENBQUMsS0FBSyxNQUFNLENBQUM7QUFDOUUsQ0FBQyxDQUFDO0FBTlcsUUFBQSxpQkFBaUIscUJBTTVCO0FBRUY7O0dBRUc7QUFDSSxNQUFNLGNBQWMsR0FBRyxDQUFDLElBQVMsRUFBRSxNQUFnQixFQUFXLEVBQUU7O0lBQ3JFLElBQUksQ0FBQyxJQUFJLEVBQUU7UUFDVCxPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQsSUFBSSxNQUFNLElBQUksQ0FBQSxNQUFBLElBQUksQ0FBQyxPQUFPLDBDQUFFLFdBQVcsRUFBRSxNQUFLLEtBQUssRUFBRTtRQUNuRCxPQUFPLElBQUksQ0FBQztLQUNiO0lBRUQsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1FBQ25CLE9BQU8sSUFBQSxzQkFBYyxFQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDOUM7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FBQztBQWRXLFFBQUEsY0FBYyxrQkFjekIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBRERfSlNYX1BSRUZJWCxcbiAgRFVQTElDQVRFX1BMQUNFSE9MREVSX1BSRUZJWCxcbiAgVEVNUE9SQVJZX1NUWUxJTkdfQ0xBU1NfTkFNRSxcbiAgV1JBUF9JTl9ESVZfUExBQ0VIT0xERVJfQ09ERUJBU0VfSUQsXG59IGZyb20gJy4vY2hhbmdlSXRlbUZ1bmN0aW9ucyc7XG5cbi8vIE11c3QgbWF0Y2ggaWRlbnRpZmllciB1dGlscyBvbiB0aGUgZnJvbnRlbmRcbmV4cG9ydCBjb25zdCBFTEVNRU5UX0tFWV9QUkVGSVggPSAnYXJiODkta2V5LSc7XG5leHBvcnQgY29uc3QgVU5JUVVFX0xPT0tVUF9QUkVGSVggPSAnYXJiODktbG9va3VwLSc7IC8vIFVzZWQgb25seSBmb3IgcHJvY2Vzc2luZyB0aGUgbmF2IHRyZWVcbmV4cG9ydCBjb25zdCBPVVRMSU5FX0NMQVNTID0gJ2FyYjg5LW91dGxpbmUnO1xuZXhwb3J0IGNvbnN0IEVESVRfVEVYVF9CVVRUT04gPSAnYXJiODktZWRpdC10ZXh0LWJ1dHRvbic7XG5leHBvcnQgY29uc3QgVEVNUE9fSU5TVEFOVF9ESVZfRFJBV19DTEFTUyA9ICdhcmI4OS1pbnN0YW50LWRpdi1kcmF3JztcbmV4cG9ydCBjb25zdCBURU1QT19NT1ZFX0JFVFdFRU5fUEFSRU5UU19PVVRMSU5FID1cbiAgJ2FyYjg5LW1vdmUtYmV0d2Vlbi1wYXJlbnRzLW91dGxpbmUnO1xuZXhwb3J0IGNvbnN0IFRFTVBPX0lOU1RBTlRfVVBEQVRFX1NUWUxJTkdfUFJFRklYID0gJ2FyYjg5LXN0eWxpbmctJztcbmV4cG9ydCBjb25zdCBURU1QT19ESVNQTEFZX05PTkVfVU5USUxfUkVGUkVTSF9DTEFTUyA9XG4gICdhcmI4OS1kaXNwbGF5LW5vbmUtdW50aWwtcmVmcmVzaCc7XG5leHBvcnQgY29uc3QgVEVNUE9fREVMRVRFX0FGVEVSX0lOU1RBTlRfVVBEQVRFID1cbiAgJ2FyYjg5LWRlbGV0ZS1hZnRlci1pbnN0YW50LXVwZGF0ZSc7XG5cbmNvbnN0IEtOT1dOX0NMQVNTRVMgPSBuZXcgU2V0KFtcbiAgT1VUTElORV9DTEFTUyxcbiAgVEVNUE9fSU5TVEFOVF9ESVZfRFJBV19DTEFTUyxcbiAgVEVNUE9fTU9WRV9CRVRXRUVOX1BBUkVOVFNfT1VUTElORSxcbiAgVEVNUE9fRElTUExBWV9OT05FX1VOVElMX1JFRlJFU0hfQ0xBU1MsXG4gIFdSQVBfSU5fRElWX1BMQUNFSE9MREVSX0NPREVCQVNFX0lELFxuICBURU1QT1JBUllfU1RZTElOR19DTEFTU19OQU1FLFxuICBFRElUX1RFWFRfQlVUVE9OLFxuXSk7XG5jb25zdCBLTk9XTl9DTEFTU19QUkVGSVhFUyA9IFtcbiAgRUxFTUVOVF9LRVlfUFJFRklYLFxuICBVTklRVUVfTE9PS1VQX1BSRUZJWCxcbiAgVEVNUE9fSU5TVEFOVF9VUERBVEVfU1RZTElOR19QUkVGSVgsXG4gIERVUExJQ0FURV9QTEFDRUhPTERFUl9QUkVGSVgsXG4gIEFERF9KU1hfUFJFRklYLFxuXTtcblxuLy8gQXR0cmlidXRlcyB0aGF0IGFyZSBzZXQgdW50aWwgdGhlIG5leHQgTmF2IFRyZWUgUmVmcmVzaFxuZXhwb3J0IGNvbnN0IFRFTVBPX0lOU1RBTlRfVVBEQVRFID0gJ2FyYjg5LWluc3RhbnQtdXBkYXRlJztcbmV4cG9ydCBjb25zdCBURU1QT19ERUxFVEVfQUZURVJfUkVGUkVTSCA9ICdhcmI4OS1kZWxldGUtYWZ0ZXItcmVmcmVzaCc7XG5leHBvcnQgY29uc3QgVEVNUE9fT1VUTElORV9VTlRJTF9SRUZFU0ggPSAnYXJiODktb3V0bGluZS11bnRpbC1yZWZyZXNoJztcbmV4cG9ydCBjb25zdCBURU1QT19ET19OT1RfU0hPV19JTl9OQVZfVU5USUxfUkVGUkVTSCA9XG4gICdhcmI4OS1kby1ub3Qtc2hvdy1pbi1uYXYnO1xuZXhwb3J0IGNvbnN0IFRFTVBPX0VMRU1FTlRfSUQgPSAndGVtcG9lbGVtZW50aWQnO1xuZXhwb3J0IGNvbnN0IFRFTVBPX1RFU1RfSUQgPSAnZGF0YS10ZXN0aWQnO1xuZXhwb3J0IGNvbnN0IFRFTVBPX1FVRVVFX0RFTEVURV9BRlRFUl9IT1RfUkVMT0FEID1cbiAgJ2FyYjg5LXF1ZXVlLWRlbGV0ZS1hZnRlci1ob3QtcmVsb2FkJztcblxuZXhwb3J0IGNvbnN0IEtOT1dOX0FUVFJJQlVURVMgPSBuZXcgU2V0KFtcbiAgVEVNUE9fSU5TVEFOVF9VUERBVEUsXG4gIFRFTVBPX0RFTEVURV9BRlRFUl9SRUZSRVNILFxuICBURU1QT19ERUxFVEVfQUZURVJfSU5TVEFOVF9VUERBVEUsXG4gIFRFTVBPX09VVExJTkVfVU5USUxfUkVGRVNILFxuICBURU1QT19RVUVVRV9ERUxFVEVfQUZURVJfSE9UX1JFTE9BRCxcbiAgVEVNUE9fRE9fTk9UX1NIT1dfSU5fTkFWX1VOVElMX1JFRlJFU0gsXG4gIFRFTVBPX0VMRU1FTlRfSUQsXG4gIFRFTVBPX1RFU1RfSUQsXG5dKTtcblxuZXhwb3J0IGNvbnN0IHZhbGlkYXRlVXVpZCA9ICh1dWlkOiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoXG4gICAgJ15bMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMS01XVswLTlhLWZdezN9LVs4OWFiXVswLTlhLWZdezN9LVswLTlhLWZdezEyfSQnLFxuICAgICdpJyxcbiAgKS50ZXN0KHV1aWQpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldENvZGViYXNlSWRGcm9tQ2xhc3NOYW1lID0gKFxuICBjbGFzc05hbWU6IHN0cmluZyxcbik6IHN0cmluZyB8IG51bGwgPT4ge1xuICBpZiAoXG4gICAgY2xhc3NOYW1lICYmXG4gICAgY2xhc3NOYW1lLnN0YXJ0c1dpdGgoJ3RlbXBvLScpICYmXG4gICAgKHZhbGlkYXRlVXVpZChjbGFzc05hbWUuc3Vic3RyaW5nKCd0ZW1wby0nLmxlbmd0aCkpIHx8XG4gICAgICBjbGFzc05hbWUgPT09IFdSQVBfSU5fRElWX1BMQUNFSE9MREVSX0NPREVCQVNFX0lEIHx8XG4gICAgICBjbGFzc05hbWUuc3RhcnRzV2l0aChEVVBMSUNBVEVfUExBQ0VIT0xERVJfUFJFRklYKSlcbiAgKSB7XG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldENvZGViYXNlSWRGcm9tTm9kZSA9IChub2RlOiBhbnkpOiBzdHJpbmcgfCBudWxsID0+IHtcbiAgaWYgKCFub2RlPy5jbGFzc0xpc3QpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGxldCBjbHNGb3VuZDogYW55ID0gbnVsbDtcbiAgbm9kZS5jbGFzc0xpc3QuZm9yRWFjaCgoY2xzOiBzdHJpbmcpID0+IHtcbiAgICAvLyBBIGJpdCBvZiBhIGhhY2sgLT4gaW4gdGhlIGNhc2Ugd2hlbiB0aGVyZSBhcmUgbXVsdGlwbGUgdGVtcG8gY29kZWJhc2UgSURzIG9uIGFuIGVsZW1lbnRcbiAgICAvLyB3ZSB3YW50IHRvIHVzZSB0aGUgZmlyc3Qgb25lIGRlZmluZWQuIFRoaXMgaGFwcGVucyBpbiB0aGUgY2FzZSBvZiBmb3J3YXJkIHJlZnMsIGFuZCB3ZVxuICAgIC8vIGFsd2F5cyBhZGQgdGhlIGJvdHRvbS1tb3N0IGNsYXNzTmFtZSB0byB0aGUgZW5kIG9mIHRoZSBjbGFzc2VzIGxpc3QsIHNvIHdlIHdhbnQgdG9cbiAgICAvLyBzaG93IHRoZSB0b3AtbW9zdCBlbGVtZW50IGluIHRoaXMgY2FzZVxuICAgIGlmIChjbHNGb3VuZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghY2xzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZXh0cmFjdGVkSWQgPSBnZXRDb2RlYmFzZUlkRnJvbUNsYXNzTmFtZShjbHMpO1xuICAgIGlmIChleHRyYWN0ZWRJZCkge1xuICAgICAgY2xzRm91bmQgPSBleHRyYWN0ZWRJZDtcbiAgICB9XG4gIH0pO1xuXG4gIGlmIChjbHNGb3VuZCkge1xuICAgIHJldHVybiBjbHNGb3VuZDtcbiAgfVxuXG4gIGlmIChub2RlPy50YWdOYW1lPy50b0xvd2VyQ2FzZSgpID09ICdib2R5Jykge1xuICAgIHJldHVybiAnYm9keSc7XG4gIH1cblxuICBpZiAobm9kZT8uaWQgPT0gJ3Jvb3QnKSB7XG4gICAgcmV0dXJuICdyb290JztcbiAgfVxuXG4gIGlmIChub2RlPy5pZCA9PSAnX19uZXh0Jykge1xuICAgIHJldHVybiAnX19uZXh0JztcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcblxuZXhwb3J0IGNvbnN0IGFkZEVsZW1lbnRLZXlBc0NsYXNzID0gKG5vZGU6IGFueSwgc2FmZUVsZW1lbnRLZXk6IHN0cmluZykgPT4ge1xuICBpZiAoIW5vZGU/LmNsYXNzTGlzdCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGNsYXNzZXNUb1JlbW92ZSA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICBub2RlLmNsYXNzTGlzdC5mb3JFYWNoKChjbHM6IHN0cmluZykgPT4ge1xuICAgIGlmIChjbHM/LnN0YXJ0c1dpdGgoRUxFTUVOVF9LRVlfUFJFRklYKSkge1xuICAgICAgY2xhc3Nlc1RvUmVtb3ZlLmFkZChjbHMpO1xuICAgIH1cbiAgfSk7XG5cbiAgY2xhc3Nlc1RvUmVtb3ZlLmZvckVhY2goKGNsczogc3RyaW5nKSA9PiB7XG4gICAgbm9kZS5jbGFzc0xpc3QucmVtb3ZlKGNscyk7XG4gIH0pO1xuXG4gIG5vZGUuY2xhc3NMaXN0LmFkZChgJHtFTEVNRU5UX0tFWV9QUkVGSVh9JHtzYWZlRWxlbWVudEtleX1gKTtcbn07XG5cbmV4cG9ydCBjb25zdCBhZGRVbmlxdWVMb29rdXBBc0NsYXNzID0gKG5vZGU6IGFueSwgdW5pcXVlTG9va3VwOiBzdHJpbmcpID0+IHtcbiAgaWYgKCFub2RlPy5jbGFzc0xpc3QpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBjbGFzc2VzVG9SZW1vdmUgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgbm9kZS5jbGFzc0xpc3QuZm9yRWFjaCgoY2xzOiBzdHJpbmcpID0+IHtcbiAgICBpZiAoY2xzPy5zdGFydHNXaXRoKFVOSVFVRV9MT09LVVBfUFJFRklYKSkge1xuICAgICAgY2xhc3Nlc1RvUmVtb3ZlLmFkZChjbHMpO1xuICAgIH1cbiAgfSk7XG5cbiAgY2xhc3Nlc1RvUmVtb3ZlLmZvckVhY2goKGNsczogc3RyaW5nKSA9PiB7XG4gICAgbm9kZS5jbGFzc0xpc3QucmVtb3ZlKGNscyk7XG4gIH0pO1xuXG4gIG5vZGUuY2xhc3NMaXN0LmFkZChgJHtVTklRVUVfTE9PS1VQX1BSRUZJWH0ke3VuaXF1ZUxvb2t1cH1gKTtcbn07XG5cbmV4cG9ydCBjb25zdCBhZGRDb2RlYmFzZUlkVG9Ob2RlID0gKG5vZGU6IGFueSwgY29kZWJhc2VJZDogc3RyaW5nKSA9PiB7XG4gIGlmICghbm9kZT8uY2xhc3NMaXN0KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgY2xhc3Nlc1RvUmVtb3ZlID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gIG5vZGUuY2xhc3NMaXN0LmZvckVhY2goKGNsczogc3RyaW5nKSA9PiB7XG4gICAgaWYgKCFjbHMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZ2V0Q29kZWJhc2VJZEZyb21DbGFzc05hbWUoY2xzKSkge1xuICAgICAgY2xhc3Nlc1RvUmVtb3ZlLmFkZChjbHMpO1xuICAgIH1cbiAgfSk7XG5cbiAgY2xhc3Nlc1RvUmVtb3ZlLmZvckVhY2goKGNsczogc3RyaW5nKSA9PiB7XG4gICAgbm9kZS5jbGFzc0xpc3QucmVtb3ZlKGNscyk7XG4gIH0pO1xuXG4gIG5vZGUuY2xhc3NMaXN0LmFkZChjb2RlYmFzZUlkKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRFbGVtZW50S2V5RnJvbU5vZGUgPSAobm9kZTogYW55KTogc3RyaW5nIHwgbnVsbCA9PiB7XG4gIGlmICghbm9kZT8uY2xhc3NMaXN0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsZXQgY2xzRm91bmQgPSBudWxsO1xuICBub2RlLmNsYXNzTGlzdC5mb3JFYWNoKChjbHM6IHN0cmluZykgPT4ge1xuICAgIGlmIChjbHM/LnN0YXJ0c1dpdGgoRUxFTUVOVF9LRVlfUFJFRklYKSkge1xuICAgICAgY2xzRm91bmQgPSBjbHMuc3Vic3RyaW5nKEVMRU1FTlRfS0VZX1BSRUZJWC5sZW5ndGgpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjbHNGb3VuZDtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRVbmlxdWVMb29rdXBGcm9tTm9kZSA9IChub2RlOiBhbnkpOiBzdHJpbmcgfCBudWxsID0+IHtcbiAgaWYgKCFub2RlPy5jbGFzc0xpc3QpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGxldCBjbHNGb3VuZCA9IG51bGw7XG4gIG5vZGUuY2xhc3NMaXN0LmZvckVhY2goKGNsczogc3RyaW5nKSA9PiB7XG4gICAgaWYgKGNscz8uc3RhcnRzV2l0aChVTklRVUVfTE9PS1VQX1BSRUZJWCkpIHtcbiAgICAgIGNsc0ZvdW5kID0gY2xzLnN1YnN0cmluZyhVTklRVUVfTE9PS1VQX1BSRUZJWC5sZW5ndGgpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjbHNGb3VuZDtcbn07XG5cbmV4cG9ydCBjb25zdCByZW1vdmVVbmlxdWVMb29rdXBGcm9tTm9kZSA9IChub2RlOiBhbnkpOiBib29sZWFuID0+IHtcbiAgaWYgKCFub2RlPy5jbGFzc0xpc3QpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBjbGFzc2VzVG9SZW1vdmUgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgbm9kZS5jbGFzc0xpc3QuZm9yRWFjaCgoY2xzOiBzdHJpbmcpID0+IHtcbiAgICBpZiAoY2xzPy5zdGFydHNXaXRoKFVOSVFVRV9MT09LVVBfUFJFRklYKSkge1xuICAgICAgY2xhc3Nlc1RvUmVtb3ZlLmFkZChjbHMpO1xuICAgIH1cbiAgfSk7XG5cbiAgY2xhc3Nlc1RvUmVtb3ZlLmZvckVhY2goKGNsczogc3RyaW5nKSA9PiB7XG4gICAgbm9kZS5jbGFzc0xpc3QucmVtb3ZlKGNscyk7XG4gIH0pO1xuXG4gIHJldHVybiBjbGFzc2VzVG9SZW1vdmUuc2l6ZSA+IDA7XG59O1xuXG5leHBvcnQgY29uc3QgaGFzQ2xhc3MgPSAobm9kZTogYW55LCBrbGFzczogc3RyaW5nKTogYm9vbGVhbiA9PiB7XG4gIGlmICghbm9kZT8uY2xhc3NMaXN0KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgbGV0IGhhc0NsYXNzID0gZmFsc2U7XG4gIG5vZGUuY2xhc3NMaXN0LmZvckVhY2goKGNsczogc3RyaW5nKSA9PiB7XG4gICAgaWYgKGNscyA9PSBrbGFzcykge1xuICAgICAgaGFzQ2xhc3MgPSB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBoYXNDbGFzcztcbn07XG5cbmV4cG9ydCBjb25zdCBpc091dGxpbmUgPSAobm9kZTogYW55KTogYm9vbGVhbiA9PiB7XG4gIHJldHVybiBoYXNDbGFzcyhub2RlLCBPVVRMSU5FX0NMQVNTKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRBbGxVbmtub3duQ2xhc2VzRnJvbUxpc3QgPSAoY2xhc3Nlczogc3RyaW5nW10pOiBzdHJpbmdbXSA9PiB7XG4gIHJldHVybiBjbGFzc2VzLmZpbHRlcigoY2xzKSA9PiB7XG4gICAgaWYgKCFjbHMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBpc0NvZGViYXNlSWQgPSBnZXRDb2RlYmFzZUlkRnJvbUNsYXNzTmFtZShjbHMpICE9PSBudWxsO1xuXG4gICAgY29uc3QgY2xzU3RhcnRzV2l0aEtub3duUHJlZml4ID0gS05PV05fQ0xBU1NfUFJFRklYRVMuc29tZSgocHJlZml4KSA9PlxuICAgICAgY2xzLnN0YXJ0c1dpdGgocHJlZml4KSxcbiAgICApO1xuXG4gICAgaWYgKCFjbHNTdGFydHNXaXRoS25vd25QcmVmaXggJiYgIUtOT1dOX0NMQVNTRVMuaGFzKGNscykgJiYgIWlzQ29kZWJhc2VJZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRBbGxVbmtub3duQ2xhc3NlcyA9IChub2RlOiBhbnkpOiBzdHJpbmdbXSA9PiB7XG4gIGlmICghbm9kZT8uY2xhc3NMaXN0KSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcmV0dXJuIGdldEFsbFVua25vd25DbGFzZXNGcm9tTGlzdChBcnJheS5mcm9tKG5vZGUuY2xhc3NMaXN0KSk7XG59O1xuXG4vKipcbiAqIEFjY2VwdHMgYSBub2RlIGZyb20gbXV0YXRpb24gb2JzZXJ2ZXIgYW5kIGRldGVybWluZXMgaWYgaXQncyBhIG1vdmluZyBlbGVtZW50LlxuICogUmV0dXJucyBtb3ZpbmcgaWYgYW5kIG9ubHkgaWYgdGhlIG5vZGUgaGFzIHRoZSBhdHRyaWJ1dGUgYGFyYjg5LWluc3RhbnQtdXBkYXRlYCBzZXQgdG8gdHJ1ZS5cbiAqIEBwYXJhbSBub2RlXG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgY29uc3QgaXNNb3ZpbmdFbGVtZW50ID0gKG5vZGU6IGFueSk6IGJvb2xlYW4gPT4ge1xuICBpZiAoIW5vZGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBDaGVjayBpZiB0aGUgbm9kZSByZXNwb25kcyB0byBnZXRBdHRyaWJ1dGUgbWV0aG9kLlxuICBpZiAodHlwZW9mIG5vZGUuZ2V0QXR0cmlidXRlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIG5vZGUuZ2V0QXR0cmlidXRlKFRFTVBPX0lOU1RBTlRfVVBEQVRFKSA9PT0gJ3RydWUnO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzU2tpcE5hdlRyZWVOb2RlID0gKG5vZGU6IGFueSkgPT4ge1xuICBpZiAoIW5vZGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICByZXR1cm4gbm9kZS5nZXRBdHRyaWJ1dGUoVEVNUE9fRE9fTk9UX1NIT1dfSU5fTkFWX1VOVElMX1JFRlJFU0gpID09PSAndHJ1ZSc7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBub2RlIGhhcyBhbnkgcGFyZW50IHRoYXQgaXMgYW4gc3ZnIHRhZ1xuICovXG5leHBvcnQgY29uc3QgaXNFbGVtZW50SW5TdmcgPSAobm9kZTogYW55LCBwYXJlbnQ/OiBib29sZWFuKTogYm9vbGVhbiA9PiB7XG4gIGlmICghbm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChwYXJlbnQgJiYgbm9kZS50YWdOYW1lPy50b0xvd2VyQ2FzZSgpID09PSAnc3ZnJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgIHJldHVybiBpc0VsZW1lbnRJblN2Zyhub2RlLnBhcmVudE5vZGUsIHRydWUpO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcbiJdfQ==